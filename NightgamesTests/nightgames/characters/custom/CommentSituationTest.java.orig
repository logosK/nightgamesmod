package nightgames.characters.custom;

import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;

<<<<<<< HEAD
import nightgames.Resources.ResourceLoader;
import nightgames.actions.Movement;
import nightgames.areas.Area;
import nightgames.characters.BlankPersonality;
import nightgames.characters.CharacterSex;
import nightgames.characters.NPC;
import nightgames.combat.Combat;
import nightgames.global.Global;
import nightgames.global.TestGlobal;
=======
>>>>>>> DarkSilverMage/master
import nightgames.json.JsonUtils;
import org.hamcrest.core.*;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;

import java.io.File;
import java.io.InputStreamReader;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
<<<<<<< HEAD
import java.util.Optional;

=======
>>>>>>> DarkSilverMage/master
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertThat;
import static org.junit.Assert.fail;

/**
 * Tests for the CommentSituation class.
 */
public class CommentSituationTest {
    private JsonArray commentsJSON;

    @Rule public ExpectedException thrown = ExpectedException.none();

    @Before public void setUp() throws Exception {
        Path file = new File("NightGamesTests/nightgames/characters/custom/test_comments.json").toPath();
        commentsJSON = JsonUtils.rootJson(file).getAsJsonObject().getAsJsonArray("allcomments");
    }

    @Test public void testParseValidComments() throws Exception {
        JsonObject successJSON = commentsJSON.get(0).getAsJsonObject();
        assertThat(successJSON.get("character").getAsString(), IsEqual.equalTo("Success"));
        JsonArray successCommentsJSON = successJSON.getAsJsonArray("comments");
        Map<CommentSituation, String> successComments = new HashMap<>();
        for (JsonElement commentJSON : successCommentsJSON) {
            CommentSituation.parseComment(commentJSON.getAsJsonObject(), successComments);
        }

        Map<CommentSituation, String> expectedComments = new HashMap<>();
        expectedComments.put(CommentSituation.SELF_HORNY, "I need you! Now! Get over here!");
        expectedComments.put(CommentSituation.OTHER_HORNY,
                        "You're a little hot for me aren't you? I can help with that.");

        assertThat(successComments.entrySet(), IsEqual.equalTo(expectedComments.entrySet()));
    }

    @Test public void testParseBadSituation() throws Exception {
        JsonObject failureJSON = commentsJSON.get(1).getAsJsonObject();
        assertThat(failureJSON.get("character").getAsString(), IsEqual.equalTo("Failure"));
        JsonArray failureCommentsJSON = failureJSON.getAsJsonArray("comments");
        Map<CommentSituation, String> failureComments = new HashMap<>();

        thrown.expect(IllegalArgumentException.class);
        thrown.expectMessage("No enum constant");

        for (Object commentJSON : failureCommentsJSON) {
            CommentSituation.parseComment((JsonObject) commentJSON, failureComments);
        }
    }
    
    @Test public void loadDefaultComments() {
        // Check that a couple of the default characters have lines loaded to ensure
        // the json is well formed.
        assertFalse(CommentSituation.getDefaultComments("Angel").isEmpty());
        assertFalse(CommentSituation.getDefaultComments("Cassie").isEmpty());
        assertFalse(CommentSituation.getDefaultComments("Jewel").isEmpty());
    }
}
